//---------------------------AI Talk--------------------------
//Alright, this is it! The bread and butter of your ghost. This is where all their random conversations are stored. Of all the .dic files, this is the one you will probably be adding stuff to and updating the most as new dialogue comes to your mind. It is relatively simple in that there aren't many functions or real coding involved with this file, but there are a few cool tricks you can do within randomtalk that can make dialogue with interesting effects, so I'll point them out as we go along.
//I'm going to leave a lot of examples of different types of dialogue in here that you can study if the possibilities they present intrigue you. Study them carefully!

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//--AiTalk
//Leave this alone.
//Advanced users, this is mostly setting up whether or not dialogue is in a chain before it displays. Again, you can leave it alone unless you want to screw around with chains for some strange reason.

AiTalk
 {
	if RAND(100) < communicateratio
 	{
 		StartCommunicate
	}
 	else
	{
 		if mikireflag == 0
		{
			if CHAIN.IDName == "" {
 				lastTalk = RandomTalk
			}
			else {
				lastTalk = ChainTalk
			}
			lastTalk
		}
 		else
		{ 
		MikireTalk
 		}
	}
 }


//--RandomTalk 
 //Alright, here we go! This is where ALL your ghost's random dialogue will go! These are the conversations that they'll have with you or each other that pop up depending on the talk rate defined in menu.dic (or if you ignored that, set in bootend.dic in the first boot, which would be every five minutes).
 
//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//ALL your random dialogue NEEDS to be in RandomTalk. You can't link to other functions or something from within RandomTalk, or a separate pool of convos in another .dic file, as far as I can tell. So, how do you then set up certain pools of dialogue that only happen when certain settings are in place (for example, when there are three characters on the screen instead of two) and won't happen when they are false? Basically, you just need to be creative with your if statements. You can nest a ton of ifs and elses in RandomTalk, and if you keep them straight, you can make a lot of dialogue here customized to whatever situation you can come up with. BUT again, you can't call other dialogue into here! I go more into how to set up a "mode" like that in the coding page of the walkthrough site.
//I GUESS you could set up more dialogue in an envelope perhaps (see word.dic) or another .dic file and then call it in here using envelopes, but that seems a bit redundant. Maybe someone else can think of a use for that though.

//The closest you can get to linking to outside dialogue is via chains, but I'll talk more about chains when we get to them. Being creative with chains can open up a lot of opportunities for you, such as presenting the user with choices every now and then, which I'm pretty sure you can't do within RandomTalk. Maybe you can, I usually do it via chains though. I'll have to experiment with this later.
//***********************************************************************

RandomTalk : nonoverlap
{
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	"  \s[16]\w5A\w3\s[23]choo!\w8\w8\n\n[half]\![*]\q[Bless you,OnSneezeBlessYou]\n\![*]\q[Nothing,OnSneezeNothing]"
	
	if month == 10
	{
		if day == 31
		{
			if timeslot == "latenight" && GhostieNameKnow == "TRUE"
			{
				"\s[18]Happy birthday to me\w2.\w2.\w2.\w8\w8\w2 Happy birthday to me\w2.\w2.\w2.\w8\w8n\n[half]/
				Happy birthday to the Ghostie named Pumpkin\w2.\w2.\w2.\w8\w8\n\n[half]/
				Happy birthday to me\w2.\w2.\w2.\w8\w8\e:chain=chain0"
			}
			else
			{
				//noexp
				"\s[25]  Happy Halloween,\w5 %(username)~\n\n[half]\w8\w8Did you do anything fun?\w8\e"
				"\s[21]  It's Halloween,\w5 %(username)!\n\n[half]\w8\w8\s[22]Did you do anything? \w8Did you throw a party?\w8\e"
				"\s[25]  \f[height,20]Happy Halloween!\f[height,16]\w8\w8\w8\n\n[half]\s[26]Did you go to any parties,\w5 %(username)?\w8\e"
				"\s[28]  I love Halloween so much!\w8\e"
				"\s[21]  \f[height,20]\f[bold,true]Halloween!!\f[height,16]\f[bold,false]\w8\e"
				"\s[22]  It's Halloween,\w5 %(username)!\w8\w5 It's time for spooky times and fun!\w8\w8\w8\n\n[half]\s[13]Why are you on your computer doing boring stuff?\w8\e"
				"\s[0]  It's Halloween! You need to get off your computer and dress up and go to parties, %(username)!\w8\e"
				"\s[0]  It's Halloween~ \w8\w8It's Halloween~\w8\e"
			}
			
		}
		else
		{
			"\0"
			--
			"\b[0]"
			"\b[1]"
			"\b[2]"
			"\b[3]"
			"\b[4]"
			"\b[5]"
			"\b[6]"
			"\b[8]"
			--
			"\s[21]"
			"\s[22]"
			"\s[26]"
			"\s[25]"
			--
			"  I'm super excited for Halloween... Are you?\w8\e"
			"  I can't wait for Halloween! I wish it would come sooner.\w8\e"
			"  Halloween is near! Do you have any plans, %(username)?\w8\e"
			"  This is Halloween! This is Halloween! Halloween! Halloween! Halloween! Halloween!\w8\e"
			"  (He's humming the tune to This is Halloween.)\w8\e"
			"  (He's humming the tune to Spooky Scary Skeletons.)\w8\e"
			"  Spooky scary skeletons... send shivers down your spine...\w8\e"
			"  This is Halloween... This is Halloween...\w8\e"
			"  I'm way too excited for Halloween! Aren't you, %(username)?\w8\e"
		}
	}
	if timeslot == "earlymorning"
	{
		"\0"
		--
		"\b[0]"
		"\b[1]"
		"\b[2]"
		"\b[3]"
		"\b[4]"
		"\b[5]"
		"\b[6]"
		"\b[8]"
		--
		//"I like to go to the beach around this time. You know, to look at the sunrise."
		"\s[18]  I like to go to the beach around this time.\w8\w8\s[26]\w5 You know, \w8\s[28]to look at the sunrise.\w8\e"
		//"I'm usually at the beach around this time. It's super peaceful."
		"\s[11]  I'm usually at the beach around this time.\n\n[half]\w5\w8\s[25]It's super peaceful."
		//"I usually go to the beach around this time./
		//It's nice to go there and watch the sunrise, and then hang out there for a bit."
		"\s[26]  I usually go to the beach around this time\w2.\w2.\w2.\w8\w3\n\n[half]/
		\s[25]It's nice to go there and watch the sunrise, \w8and then hang out there for a bit.\w8\e"
		//"I love the beach. It's super peaceful!/
		//I never really got to go there when I was alive, so I'm glad I can do that now,/
		//even though I can't build sandcastles or anything..."
		"\s[22]  I love the beach. \w8\w3\s[21]It's super peaceful!\w8\w5\n\n[half]/
		\s[18]I never really got to go there when I was alive, \w5\s[25]so I'm glad I can do that now, \w8/
		\s[18]even though I can't build sandcastles or anything\w2.\w2.\w2.\w8\e"
		//"I really like the beach. There are little crabs in the sand and the water looks really pretty!"
		"\s[25]  I really like the beach.\w8\w8\w5\n\n[half]/
		\s[28]There are little crabs in the sand and the water looks really pretty!\w8\e"
		//"I love going to the beach. I'm glad I can go there almost everyday now..."
		"\s[26]  I love going to the beach.\w8\w8\s[25] I'm glad I can go there almost everyday now\w2.\w2.\w2.\w8\e"
		//"I used to skip breakfast a lot... But you shouldn't do that, okay, %(username)? -/
		//Don't be like me. Make sure you eat!"
		"\s[23]  I used to skip breakfast a lot\w2.\w2.\w2.\w8\w5\s[13] But you shouldn't do that,\w2 okay,/
		\w2 %(username)?\w8\w8\n\n[half]\s[23]Don't be like me. \s[13]\w8\w8Make sure you eat!\w8\e"
		//"I never woke up this early when I was alive. Kudos to you, %(username)!"
		"\s[23]  I never woke up this early when I was alive.\w8\w8\w8\s[24]\n\n[half]So kudos to you, %(username)!\w8\e"
		//"I never needed to wake up this early when I was alive... But now I don't need to sleep, so..."
		"\s[23]  I never needed to wake up this early when I was alive\w2.\w2.\w2.\w2\n\n[half]/
		\w8\s[11]But now I don't need to sleep, \w8so\w2.\w2.\w2.\w8\e"
		//"I used to hate mornings... But now I quite enjoy them. Some stuff you just appreciate more after death, I suppose."
		"\s[23]  I used to hate mornings\w2.\w2.\w2.\w8\w2 \s[22]But now I quite enjoy them. \w8\w8\w8/
		\n\n[half]\s[18]Some stuff you just appreciate more after death, \w5I suppose.\w8\e"
		//"Are you up early for some reason, %(username)? It's way too early..."
		"\s[19]  Are you up early for some reason,\w8 %(username)?\w8\w8/
		\n\n[half]\s[23]It's \w2\f[italic,true]way\f[italic,false] too early\w2.\w2.\w2.\w8\e"
		//"Why are you up so early, %(username)..."
		"\s[23]  Why are you up so early,\w5 %(username)\w2.\w2.\w2.\w8\e"
		//"Why did you wake up so early today, %(username)?
		//I hope you actually slept and woke up, instead of staying up all night..."
		"\s[19]  Why did you wake up so early today,\w4 %(username)?/
		\n\n[half]\s[15]I hope you actually slept and woke up,\w8\s[23] instead of staying up all night\w2.\w2.\w2.w8\e"
	}
	if timeslot == "morning"
	{
		"Everyone should be awake by now... It still kinda feels strange, how the city goes to rest, but I still roam around..."
	}
	if timeslot == "lunch"
	{
	
	}
	if timeslot == "afternoon"
	{
		
	}
	if timeslot == "evening"
	{
		
	}
	if timeslot == "latenight"
	{
		"\0\s[0]"
	}
	if timeslot == "midnight"
	{
		"\0"
		--
		"\b[0]"
		"\b[1]"
		"\b[2]"
		"\b[3]"
		"\b[4]"
		"\b[5]"
		"\b[6]"
		"\b[8]"
		--
		"\s[12]  It's getting late\w2.\w2.\w2.\w8\w8\w8\w8\n\n[half]\s[11]Are you going to go to sleep soon,\w5 %(username)?\w8\e"
		"\s[11]  It's getting pretty late\w2.\w2.\w2.\w8\w8\w8\n\n[half]\s[12]\w8Are you going to bed soon?\w8\e"
		"\s[11]  It's getting quite late,\w5 %(username)\w2.\w2.\w2.\w8\w8\w8\s[19]\n\n[half]Are you not gonna head to bed?\w8\e"
		"\s[25]  You're quite the nightowl,\w8 %(username).\w8\e"
		"\s[21]  You're quite the nightowl,\w8 %(username).\w8\e"
		"\s[22]  You're quite the nightowl,\w8 %(username).\w8\e"
		"\s[23]  You're quite the nightowl,\w8 %(username).\w8\e"
		"\s[19]  You're not going to bed,\w5 %(username)?\w8\e"
		"\s[23]  You're not going to bed,\w5 %(username)?\w8\e"
		"\s[19]  Are you not going to head to bed,\w5 %(username)?\w8\e"
		"\s[23]  Are you not going to head to bed,\w5 %(username)?\w8\e"
		"\s[19]  Are you not gonna sleep,\w5 %(username)?\w8\e"
		"\s[23]  Are you not gonna sleep,\w5 %(username)?\w8\e"
		"\s[23]  Isn't it bedtime yet, %(username)?\w8\e"
	}
	
}

OnSneezeBlessYou
{
	"\s[21]"
	"\s[22]"
	"\s[25]"
	"\s[26]"
	"\s[28]"
	--
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	"  Thank you."
	"  Thank you!"
	"  Thanks."
	"  Thanks!"
}

OnSneezeNothing
{
}

//--Chains
//Here is where you will put your bits of chain dialogue. They are outside of RandomTalk, which makes them a bit more flexible as I mentioned above. As you can see, this function is called "firstchain", which was the same tag we put at the end of the chain in aitalk with \e:chain=firstchain.

chain0
{
	"(Would you like to wish Pumpkin the Ghostie Happy Birthday?)\n\n[half]/
	\![*]\q[Yes,wishhappybirthdayyes]\n/
	\![*]\q[No,wishhappybirthdayno]"
}
wishhappybirthdayyes
{
	//noexp
	//notdone
	"\0"
	--
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	"(You wished him Happy Birthday.)"
}



wishhappybirthdayno
{
	
}

firstchain
{{CHAIN
	"\0\s[0]Here is the second part of the chain.\w8\1\s[10]Will there be more?\e:chain=end"
}}CHAIN

//Pay careful attention to the CHAIN text and double brackets for these. Double brackets, CHAIN, dialogue, double brackets, CHAIN. If you are planning on making chains, I'd recommend just copying and pasting the chain example here and changing the dialogue and name of the function as you need. Less likely for mistakes to happen, you know?
//Note also it ends with \e:chain=end, basically ending the chain.

secondchain
{{CHAIN
	"\0\s[0]This is the second piece of chained dialogue.\1\w8\s[10]This will lead to a third chain.\e:chain=thirdchain"
}}CHAIN

thirdchain
{{CHAIN
	"\0\s[0]This is the third piece of chained dialogue.\1\w8\s[10]This is the end.\e:chain=end"
}}CHAIN

//As you can see, you can chain your chains together to make a very long-running conversation if you want! Just make sure to end the chain when you're done.


//Alright, we're done with the random converations for now, but there are a few other things in aitalk that we'll need to fill out too.


//-OnMinuteChange
//These are time-related bits of dialogue for your ghost to say. If you're uninterested, you can delete it all except for a line for MikireTalk. So it'd look something like

//OnMinuteChange
//{
//timeslot = GetTimeSlot
//if mikireflag == 1
// 	{
// 		MikireTalk
//	}
//}

//But I think these are kind of neat, so I'd leave them myself.

OnMinuteChange
 {
	timeslot = GetTimeSlot //this tells the ghost what time it is so the time related conversations above will work.
	--
 	if minute == 0 //These check what time it is. Here, it's seeing if the minute equals zero...
	{
 		if hour == 12 //And the hour equals 12, ie it's noon. You can change this to some other hour if you want.
		{
 			"\0\s[0]It's noon.\w8\1\s[15]Let's have a showdown!\w8\0\n\n[half]\s[9]There are no corrals here, dude.\e"
			//Replace with appropriate dialogue as you want.
		}
 		elseif hour == 0 //If the hour is zero, aka midnight. Again, you can change this to whatever hour you want to check for.
		{
 			"\0\s[0]It's midnight!\e"
 			"\0\s[0]This is another bit of dialogue for midnight.\w8\1\s[10]BooooOoooOOOooOOOOo.\e"
 			"\0\s[0]This is the third bit of dialogue for midnight.\e"
			//Then replace the dialogue with what's appropriate.
		}
		elseif hour == 23 //if the hour is 23, aka 11 pm.
		{
			if minute == 55 //And if the minutes are at 55.
			{
			"\0\s[0]5 minutes to midnight.\e"
			}
			else //if it isn't 11:55. These are meant to be examples of specific times you can check, you don't have to check for the same times. You can also always delete individual elseifs if you can't think of any time to check. Like, you could delete the elseif for hour == 23 and the subsequent checks below it, then move on to the elseif below for hour 7. This section is flexible.
			{
			"\0\s[0]It's 11 pm.\e"
			//replace the dialogue here again as you like.
			}
		}
		elseif hour == 7 && minute == 30 && weekday == 0 //Here, it's checking for a specific time on a specific day. You can add things to your time checks just like this by using the AND operator, &&. This adds up to 7:30, Sunday. If you have a favorite TV program on at some time, you could have your ghost comment on when it comes on like this.
		{
			"\0\s[0]It's 7:30 on Sunday.\e"
			//Replace with what's appropriate.
		}
		elseif hour == 16 //if the hour is 16, or 4 pm. You can add in time checks for whatever times you want, or change what these time checks are looking for. These are just meant to be examples of how it works.
		{
			"\1\s[10]It's 4 pm.\e"
			//Replace with what's appropriate.
		}
		else
		{
			"\0\s[0]It's %(hour12)'o clock.\e"
			//%(hour12) stores the time. This is a general top of the hour notification. I personally like this because it helps me keep track of time when I've been working on something, so when a ghost is all "Hey it's 3 o clock" I can be like woah really when did that happen. If you think this is annoying though, you can just delete this bit of dialogue to leave this else statement blank, or leave "" in here instead.
		}
	}
	//Don't touch this part.
	elseif mikireflag == 1
 	{
 		MikireTalk
	}
 }



//--OnSecondChange
//Like the above, this handles what happens every time a second goes by. Most of this you will not have to touch.

OnSecondChange
 {
	if passsec == 60
 		{
	 	passsec = 0
 		passmin = passmin + 1
		}
 	else
 		{
	 	passsec = passsec + 1
		}
	if mikireflag == 1 && reference1 == 0
		{
			EndMikireTalk
 		}
		mikireflag = reference1
	if reference2 == 1
	{
 		//This dialogue is for when the two characters are overlapping each other. If you don't want your characters to care, you can just leave this blank.
		
 		"\0\s[0]Me and Triangle are overlapping.\w8\1\s[19]That's strange since your resolution is %screenwidthx%screenheight, %(username). Shouldn't we have enough space?\4\e"
		
		//You can see here the use of two envelopes, screenwidth and screenheight, to tell the user their resolution. Oddly, they are not in parentheses. I'm not sure why this is, but they don't display right otherwise. An odd quirk with these two envelopes.
		//Note also how Triangle moves away at the end of the dialogue. This is due to the \4 tag. That will make any one character move away from the other if they are able. I talked about this tag and its counterpart tag \5 in the SakuraScript page on the walkthrough.
	}
 }

 //---- MikireTalk ---------------------------------------------------------------------
 //I'm actually a little fuzzy on MikireTalk and what exactly it does since it shows up a lot in odd places, but for the purposes of this function here, what this does is bring up some dialogue when the main character is off the screen. For example, if you dragged Girl over to the side of your monitor until she was partially concealed by it. This dialogue would then come up. If you don't want your characters to care, you can leave the dialogue blank.
 
MikireTalk
 {
	"\0\s[0]I'm off the screen.\w8\1\s[10]You can push Ctrl-Shift-F12 to bring her back."
	//Note the hotkey combo Triangle mentions. He's telling the truth, that should bring her back on the screen.
 }

 //----EndMikireTalk--------------------------------------------------------------------
 //For after you bring the character back on screen.
 
EndMikireTalk
 {
	"\0\s[0]I'm no longer off the screen.\w8\1\s[19]What a shame.\w8\0\s[9]\n\n[half]Shut up.\e"
 }


//**** OnSurfaceRestore *****************************************************************
//OnSurfaceRestore is a handy function. What this does is that after a short period of time, the ghost will go back to its default pose, so you won't have a ghost stuck in one expression for too long. It's also helpful if you've made one of the characters disappear using \s[-1] in dialogue and didn't bring them back at the end of it. This will do that for you.
//I'm going to comment out the if/else statements in this because the circumstances in which they'd come up seem pretty unlikely and unnecessary if you're just going to be making a simple ghost. You can just leave this function alone and move on if you want. However, if you do want to use them, just uncomment the lines by deleting the slashes and fill in the info as you need.

//*********************Advanced User Info*******************************
//You can put if statements in OnSurfaceRestore to make exceptions for certain poses, or to make sure that once they're in a certain pose, they stay in that pose. For example, if you turn my Hunter and Smoker ghost into eggplants, there's a check for the their eggplant pose numbers to make sure they STAY eggplants when OnSurfaceRestore is called.
//You can also use OnSurfaceRestore to clean up things that might be left on the screen, primarily from using p[number]\s[] to call up other objects or characters. Just make sure to add a p[number]\s[-1] to OnSurfaceRestore, and that should get rid of it each time the ghost cleans itself up.
//***********************************************************************

OnSurfaceRestore
 {
 	//if reference0 == 4 || reference0 == 6 //This is checking what poses they are in. This looks to see if Girl is in pose 4 or pose 6, since she is reference0.
 	//{
 	//"\1\s[10]You're in a sad pose.\w8\0\s[0]I'll go back to normal then.\e"
 	//}
 	//elseif reference1 == 14 || reference1 == 16 //This is doing the same but for Triangle, since he's reference1. It looks to see if he's in pose 14 or post 16.
 	//{
 	//"\0\s[0]You look sad.\w8\1\s[10]I'll go back to normal.\e"
 	//}
 	//else
 	//{
	"\0\s[0]\1\s[10]\e"
	//}
 }

 
 //--OnKeyPress
 //This defines the hotkeys your ghost will use. You can change these to whatever you want, but I don't really know why you would. I'd just leave this alone. Advanced Users can add new hotkeys attached to whatever function if you want.
 
OnKeyPress
{
	if reference0 == "t"
	{
	OnAiTalk
	}
	elseif reference0 == "r"
	{
	OnLastTalk
	}
	elseif reference0 == "f1"
	{
	"\![open,readme]"
	}
}