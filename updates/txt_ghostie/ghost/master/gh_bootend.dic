//---Booting and Ending---

//--On first boot
OnFirstBoot
{
 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passmin = 0 
	passsec = 0 // These two keep track of the time.
 	username         = "USER"  //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	   // Sets their being-pet state to zero.
 	teachusername    = 0	   // Related to them learning your name.
	mikireflag       = 0	   // Determines behavior at certain points.
 	aitalkinterval = 400       //Their default talk rate.
	presuffix = "unknown"      //Their pronouns
 	birthdayprint = "unknown"     //A temporary value for the user's birthday.
	talktime = "5 minutes"     //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF"       //Sets whether or not the user can uninstall the ghost to "OFF".
	nowshell = "default"       //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	LunchMentioned = "FALSE"   //If Lunch came up in conversation
	DinnerMentioned = "FALSE"  //If Dinner came up in conversation
	WaterCactie = "FALSE"      //If User has watered Cactie that day.
	AdmireCactie = "FALSE"     //If User has admired Cactie that day.
	CleanCactie = "FALSE"      //If User has cleaned Cactie that day.
	CactieNameKnow = "FALSE"   //If User knows the cactus' name.
	ThornCactie = "FALSE"      //If User has been pricked by Cactie that day.
	FirstNameInput = 0         //If it is the User's first time inputing name.
	
	
	if reference0 == 0 
 	{
		"\![enter,passivemode]\0\s[11]\b[4]  Oh! \w1I've never been here before...\x\c\s[19]\b[2]  \w8.\w3.\w3.\w8\w8\s[20] Where am I?\x\s[16]\b[5]  (He finally seems to notice you.)\x\s[17]\b[1]  O-\w3oh!\w6 Hi there!\w8\w8\w8 \n\n[half]You- \w5You're a human!\x\c\s[27]\b[3]  (He appears to be freaking out.)\x\c\s[16]\b[8]  \f[bold,true]\f[height,18]YOU'RE A HUMAN!!\f[bold,false]\f[height,16]\w8\w8\s[18]\w6\w2\n\n[half]Wait-\w2 sorry,\w5 I shouldn't shout\w2.\w2.\w2.\w8\w8\w5\c\s[16]\b[6]  But you're actually a human!\w8 \s[0]\f[height,14]\s[15]I haven't talked to a human in so long\w2.\w2.\w2.\w8\f[height,16]\w8\w8\c\s[17]\b[6]  B-\w5But hi! \w8\w4I'm a Ghostie, \w5\s[18]as you can see\w1.\w1.\w1.\n\n[half]\w8\w8\w8\s[22]What about you?\w8 What's your name?\x\![open,inputbox,OnNameTeach,-1]\![leave,passivemode]"
		
		
		//\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n/
		//\![*]\q[She/Her/Hers,choicefirstsheher]\n/
		//\![*]\q[They/Them/Their,choicefirsttheythem]\e"
 	}
	else
 	{
		//--Dialogue for when the user uninstalls and reinstalls ghost. 
		//noexp
 		{
		//"Oh... I'm back here."
		//"I thought you didn't want me around anymore...? I'm confused."
 		"\0\s[0]\b[8]  Oh...\w8 I'm back here.\w8\w8\w8\x/
		\c\s[0]\b[3]  I thought you didn't want me around anymore...?\w8/
		\s[0]\n\n\n[half]\f[height,13]I'm confused\w2.\w2.\w2.\w8\e"
		}
 	}
}


//-----Select pronouns
//--Him/he/his
Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
}
//--Her/she.her
Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
}
//--Them/They/Their
Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
}


//--NameInput
NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\1\s[10]Now that the pronouns are set, we will ask for the user's name. \![leave,passivemode]\w8\0\s[0]What is your name, user? \![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//----GetTimeSlot
//--Tell what time of day it is
GetTimeSlot
{
	if hour >= 5 && hour <= 8
	{
		"earlymorning"
	}
	elseif hour >= 9 && hour <= 11
	{
		"morning"
	}
	elseif hour >= 12 && hour <= 14
	{
		"lunch"
	}
	elseif hour >= 15 && hour <= 17
	{
		"afternoon"
	}
	elseif hour >= 17 && hour <= 19
	{
		"evening"
	}
	elseif hour >= 20 && hour <= 23
	{
		"latenight"
	}
	else
	{
		"midnight"
	}
}

//----GetDaySlot
//--Find out what day it is. 
GetDaySlot
{
	"%(month)month %(day)day"
}


//-------Normal Booting
OnBoot
 {
	lastTalk = "" 
	passmin = 0
	passsec = 0
	LunchMentioned = "FALSE"
	DinnerMentioned = "FALSE"
	WaterCactie = "FALSE"
	AdmireCactie = "FALSE"
	CleanCactie = "FALSE"
	ThornCactie = "FALSE"
	
 	"\0\s[0]\1\s[10]" //Sets them up in their neutral pose.
	
	--
	dayslot = GetDaySlot
	timeslot = GetTimeSlot 
	
	if dayslot == userbirthday //Checks if today is the User's birthday. 
	{
				"\0\s[0]It's %(bornmonthprint) %(borndayprint).\w8\0\s[10]Happy birthday, %(username).\e" 
	}
	elseif dayslot == "6month 6day"
	{
				"\0\s[0]Today is June 6th.\e"
	}
	elseif dayslot == "7month 4day"
	{
				"\1\s[10]It's the fourth of July.\e"
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//---Normal Boot Talk
normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		//noexp
		//"It's Saturday night."
		//"I usually go stargazing around this time with my cactus. What about you?"
		"\0\s[0]\b[2] It's Saturday night\w2.\w2.w2.\w8\w8/
		\c\s[0]\b[6] I usually go stargazing around this time with my cactus./
		\s[0]\n\n[half]What about you?"
		}
	elseif RAND(100) <= 40 //40% chance of happening.
		{
		"\0\s[0]This is one of the random boot conversations.\w8\1\s[10]The random number drawn was less than forty.\e"
	
		"\1\s[10]This is another one of the random boot conversations.\w8\0\s[0]The random number was again less than forty.\e"
	
		"\0\s[0]This is the third random boot conversation.\w8\1\s[10]The random number was less than forty.\e"
		}
 	else
 	{
		if timeslot == "earlymorning" 
		{
			//noexp
			//"Good morning~ You're up early today."
			"\0\s[0]\b[0]  Good morning!\w8\w5/
			\s[0]\n\n[half]You're up early today.\e"
			//"Good morning! How was your sleep?"
			"\0\s[0]\b[4]\n  Good morning! /
			\w8How was your sleep last night?\w8\w5\n\n[half]/
			\![*]\q[It was good,choicegoodsleep]\n/
			![*]\q[Not great,choicebadsleep]"
			//"Hi! How are you doing? Did you sleep well?"
			"\0\s[0]\b[3]\n  Hi! \w3/
			How are you doing? \w8\w3\n\n[half] /
			Did you sleep well?\w8\w5\n\n[half]/
			\![*]\q[Yep I did,choicegoodsleep]\n/
			\![*]\q[No I didn't,choicebadsleep]"
			//"Hi there. Good morning to you."
			"\0\s[0]\b[3]\n  Hi there.\w8\w2\n\n[half] /
			Goooooo\w1o\w1o\w1d\w1 morning to you.\e"
			//"Morning~"
			"\s[0]\b[8]\n\n\n       \f[height,20]Morning~\f[height,16]\e"
			//"Morning! How was your sleep?"
			"\0\s[0]\b[4]\n  Morning! /
			\w8How was your sleep last night?\w8\w5\n\n[half]/
			\![*]\q[It was good,choicegoodsleep]\n/
			![*]\q[Not great,choicebadsleep]"
		}
		elseif timeslot == "morning"
		{
			//"Morning~"
			"\s[0]\b[8]\n\n\n       \f[height,20]Morning~\f[height,16]\w8\e"
			//"Morning~ How are you doing this morning?"
			"\0\s[0]\b[1]        \f[height,20]Morning~\f[height,16]\w8\w4/
			\n\nHow are you doing this morning?\w8\w5\n\n[half]/
			\![*]\q[Good,choicemorninggood]\n/
			\![*]\q[Bad,choicemorningbad]"
			//"Morning~ How are you doing, %(username)?"
			"\0\s[0]\b[1]        \f[height,20]Morning~\f[height,16]\w8\w4/
			\n\n[half]How are you doing, %(username)?\w8\w5\n\n[half]/
			\![*]\q[Good,choicemorninggood]\n/
			\![*]\q[Bad,choicemorningbad]"
			//"Good morning. Have you eaten breakfast yet?"
			"\0\s[0]\b[6]  Good morning.\w8 /
			\n\n[half]Have you eaten breakfast yet?\w8\n\n[half]/
			\![*]\q[Yes,choicebreakfastyes]\n/
			\![*]\q[No,choicebreakfastno]"
			//"Hi! Have you have breakfast yet, %(uesrname)"
			"\0\s[0]\b[6]  Hi!\w8 /
			\n\n[half]Have you have breakfast yet, %(username)?\w8\n\n[half]/
			\![*]\q[Yes,choicebreakfastyes]\n/
			\![*]\q[No,choicebreakfastno]"
			//"Morning, %(username)!"
			"\s[0]\b[3]  Morning, \w4%(username)!\w8\e"
			//"Hello! Good morning!"
			"\s[0]\b[8]  Hello!\w8 Good morning!\w8\e"
		}
		elseif timeslot == "lunch"
		{
			//noexp
			//"It's lunchtime! Have you eaten yet, %(username)?"
			"\0\s[0]\b[0]  It's lunchtime!\w8\w8\n\n[half]/
			Have you eaten yet,\w4 %(username)?\w8\w8\n\n[half]/
			\![*]\q[Yes,choicelunchyes]\n/
			\![*]\q[No,choicelunchno]"
			//"Good afternoon!"
			"\0\s[0]\b[0]  Good afternoon!\w8\e"
			//"Good afternoon and happy lunching!"
			"\0\s[0]\b[0]  Good afternoon and happy lunching!\w8\e"
			//"Hello and happy lunching!"
			"\0\s[0]\b[0]  Hello and happy lunching!\w8\e"
			//"It's lunchtime, %(username)! Remember to eat!"
			"\0\s[0]\b[0]  It's lunchtime,\w3 %(username)! \w8\w8\n\n[half]/
			Remember to eat!\w8\e"
			
		}
		elseif timeslot == "afternoon"
		{
			//noexp
			//nobal
			//"It's the afternoon~"
			"\0\s[0]\b[0]  It's the afternoon~"
			//"Good afternoon!"
			"\0\s[0]\b[0]  Good afternoon!"
			//"It's afternoon... Have you eaten lunch, User?"
			"\0\s[0]\b[0]  It's afternoon!/
			Have you eaten lunch, User?"
			//"Good afternoon, User! How was lunch?"
			"\0\s[0]\b[0]  Good afternoon,\w3 %(username)!\w8\w2\n\n[half]/
			How was lunch?\w8\w5\n\n[half]/
			\![*]\q[It was good,choiceafternoonlunchgood]\n/
			\![*]\q[It was bad,choiceafternoonlunchbad]\n/
			\![*]\q[I haven't had lunch...,choiceafternoonlunchno]"
		}
		elseif timeslot == "evening"
		{
			"\0"
			--
			"\b[0]"
			"\b[1]"
			"\b[2]"
			"\b[3]"
			"\b[4]"
			"\b[5]"
			"\b[6]"
			"\b[8]"
			--
			//noexp
			//"Good evening!"
			"\s[0]  Good evening!\w8\e"
			//"It's evening!"
			"\s[0]  It's evening!\w8\e"
			//"It's the evening! What you up to?"
			"\s[0]  It's the evening! What you up to?\w8\e"
			//"Hello and good evening~"
			"\s[0]  Hello and good evening~\w8\e"
			//"It's evening! Are you gonna get dinner later?"
			"\s[0]  It's evening! Are you gonna get dinner later?\n\n[half]\w8\w8/
			\![*]\q[Yes,choiceeveningdinneryes]\n/
			\![*]\q[No,choiceeveningdinnerno]\n/
			\![*]\q[I've already eaten,choiceeveningdinneralready]"
			//"Good evening~ Are you gonna get dinner soon, %(username)?"
			"\s[0]  Good evening~\n\n[half]\w8\w8/
			\s[0]Are you gonna get dinner soon,\w3 %(username)?\w8\w8\w8\n\n[half]/
			\![*]\q[Yes,choiceeveningdinneryes]\n/
			\![*]\q[No,choiceeveningdinnerno]\n/
			\![*]\q[I've already eaten,choiceeveningdinneralready]"
		}
		elseif timeslot == "latenight"
		{
			
		}
		else
		{
			
		}
	}
}

//--Morning--User had a good sleep
Select.choicegoodsleep
{
	//noexp
	//"That's good."
	"\0\s[0]\b[4] That's good.\e"
	"0\s[0]\b[5] That's good.\e"
	"\0\s[0]\b[6] That's good.\e"
	"\0\s[0]\b[8] That's good.\e"
}
//--Morning--User had bad sleep
Select.choicebadsleep
{
	//noexp
	//"Aww..."
	"\s[0]\b[2] Aww\w2.\w2.\w2.\w2\w8\e"
	"\s[0]\b[3] Aww\w2.\w2.\w2.\w2\w8\e"
	"\s[0]\b[5] Aww\w2.\w2.\w2.\w2\w8\e"
	"\s[0]\b[6] Aww\w2.\w2.\w2.\w2\w8\e"
	//"Aww... That's a shame."
	"\s[0]\b[5] Aww\w2.\w2.\w2.\w8 That's a shame\w2.\w2.\w2.\w2\w8\e"
	"\s[0]\b[6] Aww\w2.\w2.\w2.\w8 That's a shame\w2.\w2.\w2.\w2\w8\e"
}
//--Morning--User is having a good morning
Select.choicemorninggood
{
	//noexp
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//"That's good."
	"\s[0]  That's good.\w8\e"
	//"Great! I'm doing pretty good too."
	"\s[0] Great! \w8I'm doing pretty good too.\w8\e"
	//"That's great! I'm doing pretty dandy myself."
	"\s[0]  That's great! \w8I'm doing pretty dandy myself.\w8\e"
	//"Cool. I'm the same."
	"\s[0]  Cool. \w8I'm the same.\w8\e"
	//"Cool. Hope your day continues to be good."
	"\s[0]  Cool. \w8Hope your day continues to be good.\\w8e"
	//"Nice!"
	"\s[0]  Nice!\w8\e"
	//"A good start to your day then! That's nice."
	"\s[0]  A good start to your day then! \w8That's nice.\w8\e"
}
//--Morning--User is having a bad morning
Select.choicemorningbad
{
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//noexp
	//"Aww... I hope things get better for you soon..."
	"\s[0]  Aww\w2.\w2.\w2.\w8\w2 /
	I hope things get better for you soon\w2.\w2.\w2.\e"
	"\s[0]  That's a shame\w2.\w2.\w2.\w8\w3 Hopefully you cheer up soon.\e"
	//"Aww... I don't want you to be upset... Cheer up soon, okay?"
	"\s[0]  Aww\w2.\w2.\w2.\w8\w3 /
	I don't want you to be upset\w2.\w2.\w2.\w8\w8\w5 /
	\c\b[3]\s[0]  Cheer up soon, \w8okay?"
	//"Aww... That wasn't the answer I was hoping for... 
	//I hope you feel better soon..."
	"\s[0]  Aww\w2.\w2.\w2.\w8\w3 /
	That wasn't the answer I was hoping for\w2.\w2.\w2.\w8\w3 /
	\s[0]I hope you feel better soon\w2.\w2.\w2.\w8\e"
	//"Oh... okay..."
	"\s[0]  Oh\w2.\w2.\w2.\w8\w3 okay\w2.\w2.\w2.\w8\e"
	//"Oh... I hope things get better for you soon."
	"\s[0]  Oh\w2.\w2.\w2.\w8\w3 I hope things get better for you soon.\e"
	//Oh... I hope you'll cheer up soon."
	"\s[0]  Oh\w2.\w2.\w2.\w8\w3\n\n[half]/
	\s[0]I hope you'll cheer up soon\w2.\w2.\w2.\w8\e"
}
//--Morning--User had breakfast
Select.choicebreakfastyes
{	
	if RAND(100) <= 10
	{
		"\0\s[0]\b[2]  Oh!\w5 What did you have?\w8\w\n\n[half]/
		[open,inputbox,inputuserbreakfast,-1]"  
		//10% chance
	}
	else
	{
		"\b[0]"
		"\b[1]"
		"\b[2]"
		"\b[3]"
		"\b[4]"
		"\b[5]"
		"\b[6]"
		"\b[8]"
		--
		//noexp
		"\s[0]That's good.\w8\w2\n\n[half]/
		\s[0]Make sure to take care of yourself,\w4 %(username)."
		"\s[0]Yay~!\w8\w2/
		\s[0]That's good."
		"Glad to hear that. Take care of yourself, okay, %(username)?"
		"Glad to hear you're taking care of yourself, %(username)."
	}
} 
//--Morning--User is explained what they had for breakfast
inputuserbreakfast
{
	//noexp
	"\b[0]"
	"\b[2]"
	"\b[5]"
	"\b[8]"
	--
	"That sounds nice..."
	"That sounds good..."
	"Sounds delcious."
	"Sounds yummy~"
	" Oh!\w5 Did you enjoy it?\n\n[half]/
	\![*]\q[Yes,choicebreakfastenjoy]\n/
	\![*]\q[No,choicebreakfastnotenjoy]"
	"  Oh!\w5 That sounds interesting\w2.\w2.\w2.\w8\w3 /
	\n\n[half]Did you enjoy it?\w8\w8\n\n[half]/
	\![*]\q[Yes,choicebreakfastenjoy]\n/
	\![*]\q[No,choicebreakfastnotenjoy]"
	"  Sounds nice!\w8  Did you enjoy it?\w8\w8\n\n[half]/
	\![*]\q[Yes,choicebreakfastenjoy]\n/
	\![*]\q[No,choicebreakfastnotenjoy]"
}
//--Morning--User enjoyed breakfast
Select.choicebreakfastenjoy
{
	"\b[3]"
	"\b[4]"
	"\b[5]"
	--
	//noexp
	"\s[0]  Nice!\w8\e"
	"\s[0]  That's good!\w8\e"
	"\s[0]  Yay~\w8\e"
}
//--Morning--User did not enjoy breakfast
Select.choicebreakfastnotenjoy
{
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//noexp
	"\s[0]  Oh\w2.\w2.\w2.\w8\e"
	"\s[0]  Oh\w2.\w2.\w2.\w8\n\n[half]/
	\s[0]I'm sorry\w2.\w2.\w2.\w8\e"
	"\s[0]  Oh\w2.\w2.\w2.\w8\n\n[half]/
	\s[0]Hopefully lunch will be better\w2.\w2.\w2.\w2?\w8\e"
}
//--Morning--User did not have breakfast
Select.choicebreakfastno
{
	if RAND(100) <= 40
	{
		//"Oh... I hope you go and get breakfast soon?"
		"\s[0]  Oh\w2.\w2.\w2.\w8\n\n[half]/
		I hope you go and get breakfast soon?\w8\w8\n\n[half]/
		\![*]\q[I will,choicebreakfastnobutwill]\n/
		\![*]\q[I probably won't,choicebreakfastnoandwont]"
	}
	else
	{
		"\b[2]"
		"\b[4]"
		"\b[6]"
		"\b[8]"
		--
		"\s[0]  Well then you should!\w8\n\n[half]You need to eat,\w3 %(username)!\w8\e"
		"\s[0]  You should probably go do that\w2.\w2.\w2.\w2\w8\n\n[half]/
		Skipping breakfast isn't good for you\w2.\w2.\w2.\8\e"
		"\s[0]  Aww\w2.\w2.\w2.\w2\w8 I hope you get something to eat soon.\8\e"
	}
}	
//--Morning--User has not had breakfast but will
Select.choicebreakfastnobutwill
{
	"\b[1]"
	"\b[2]"
	"\b[5]"
	"\b[6]"
	--
	//noexp
	"\s[0]  Ok!"
	"\s[0]  Good!"
}
//--Morning--User has not had breakfast and won't
Select.choicebreakfastnoandwont
{
	"\b[3]"
	"\b[4]"
	"\b[8]"
	"\b[0]"
	--
	//noexp
	"\s[0]  Oh, okay..."
	"\s[0]  Oh..."
	"\s[0]  Oh... Sorry for bothering you then..."
}
//--Lunch--User has eaten lunch
Select.choicelunchyes
{
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	"\b[0]"
	--
	//noexp
	//"Good!"
	"\s[0]  Good!"
	//"That's good."
	"\s[0]  That's good."
	//"Yay~"
	"\s[0]  Yay~"
}
//--Lunch--User has not eaten lunch
Select.choicelunchno
{
	//noexp
	//nobal
	//"Well then you should! You need to eat, %(username)!"
	"\s[0]\b[0]  Well then you should!\n\n[half]/
	\s[0]You need to eat,\w2 %(username)!"
	//"You should probably go do that... Skipping meals isn't good for you..."
	"\s[0]\b[0]  You should probably go do that\w1.\w1.\w1.\w8/
	Skipping meals isn't good for you\w1.\w1.\w1.\w8\e"
	//"You should probably go do that... Skipping lunch probably isn't good for you..."
	"\s[0]\b[0]  You should probably go do that\w1.\w1.\w1.\w8\w5/
	Skipping lunch probably isn't good for you\w1.\w1.\w1.\w8\e"
	//"Aww... I hope you get something to eat soon."
	"\s[0]\b[0]  Aww\w1.\w1.\w1.\w8\w8\n\n[half]/
	\s[0]I hope you get something to eat soon.\w8\e"
	//"Oh... I hope you go and get lunch soon?"
	"\s[0]\b[0]  Oh\w1.\w1.\w1.\w8\w5 I hope you go and get lunch soon?\w8\n\n[half]/
	\![*]\q[I will,choicelunchnobutwill]\n/
	\![*]\q[I probably won't,choicelunchnoandwont]"
}
//Lunch--User has not eaten lunch but will
Select.choicelunchnobutwill
{
	//noexp
	//nobal
	//"Ok!"
	"\s[0]\b[0]  Ok!"
	--
	LunchMentioned = "TRUE"
}
//Lunch--User has not eaten lunch and won't
Select.choicelunchnoandwont
{
	//noexp
	//nobal
	//"Oh, okay..."
	"\s[0]\b[0]  Oh,\w8 okay\w1.\w1.\w1.\w8\e"
	//"Oh..."
	"\s[0]\b[0]  Oh\w1.\w1.\w1.\w8\e"
	//"Oh... Sorry for bothering you then..."
	"\s[0]\b[0]  Oh\w1.\w1.\w1.\w8 Sorry for bothering you then\w1.\w1.\w1.\w8\e"
}
//--Afternoon--User's lunch was good
Select.choiceafternoonlunchgood
{
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//noexp
	//"Glad to hear it!"
	"\s[0]  Glad to hear it!"
	//"That's good!"
	"\s[0]  That's good!"
	//"Oh! What'd you have?"
	"\s[0]  Oh! \w8What'd you have?\w8\w8\w8/
	\![open,inputbox,inputuserlunch,-1]"
}
//--Afternoon--User's lunch was bad
Select.choiceafternoonlunchbad
{
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//noexp
	//"Aww... That's a shame..."
	"\s[0]  Aww\w1.\w1.\w1.\w8 /
	\s[0]That's a shame\w1.\w1.\w1.\w8\e"
	//"Oh... That's a shame..."
	"\s[0]  Oh\w1.\w1.\w1.\w8 /
	\s[0]That's a shame\w1.\w1.\w1.\w8\e"
	//"Oh... Bummer..."
	"\s[0]  Oh\w1.\w1.\w1.\w8 /
	\s[0]Bummer\w1.\w1.\w8\e."
	//"Aww.... Hopefully dinner will be better?"
	"\s[0]  Aww\w1.\w1.\w1.\w8 /
	\s[0]Hopefully dinner will be better?"
}
//--Afternoon--User did not have lunch
Select.choiceafternoonlunchno
{
	//"Aww... That's not good..."
	"\s[0]  Aww\w1.\w1.\w1.\w8 /
	That's not good\w1.\w1.\w1.\w8\e"
	//"What?! You can't just skip lunch, User!"
	"\s[0]  \f[height,22]What?!\f[height,16]\w8\w8\n\n[half]/
	You can't just skip lunch, \w2%(username)!\w8\e"
	//"Preposterous! You shouldn't skip lunch, User..."
	"\s[0]  \f[height,22]Preposterous!\f[height,16]\w8\w8\n\n[half]/
	You shouldn't skip lunch,\w3 %(username)\w1.\w1.\w1.\w8\e"
	//"What?! You can't just skip lunch!"
	"\s[0]  \f[height,22]What?!\f[height,18]\w8\w8\n\n[half]/
	You can't just skip lunch!\f[height,16]\w8\e"
	//"What?! You shouldn't skip meals, User!"
	"\s[0]  \f[height,22]What?!\f[height,18]\w8\w8\n\n[half]/
	You shouldn't skip meals, \w3%(username)!\w8\e"
	//"But you shouldn't skip meals..."
	"\s[0]  But you shouldn't skip meals\w1.\w1.\w1.\w8\e"
}
//--Afternoon--After User explains what they had for lunch
inputuserlunch
{
	"\b[0]"
	"\b[1]"
	"\b[2]"
	"\b[3]"
	"\b[4]"
	"\b[5]"
	"\b[6]"
	"\b[8]"
	--
	//noexp
	//"That sounds pretty tasty."
	"\s[0]  That sounds pretty tasty."
	//"That sounds nice... wish I could have some..."
	"\s[0]  That sounds nice\w1.\w1.\w1.\w2\w8 /
	wish I could have some\w1.\w1.\w1.\w8\e"
	//"That sounds super yummy..."
	"\s[0]  That sounds super yummy\w1.\w1.\w1.\w8\e"
	//"That sounds nice."
	"\s[0]  That sounds nice.\w8\e"
	//"That sounds good..."
	"\s[0]  That sounds good\w1.\w1.\w1.\w8\e"
	//"That sounds nice... I'm glad you had a good lunch, User."
	"That sounds nice\w1.\w1.\w1.\w8\n\n[half]/
	I'm glad you had a good lunch, %(username).\w8\e"
}

Select.choiceeveningdinneryes
{
	DinnerMentioned = "TRUE"
	--
	//noexp
	//"That's good~"
	"\s[0]  That's good~\w8\e"
	//"Okie! Enjoy your dinner later!"
	"\s[0]  Okie!\w8\w5 /
	\s[0]Enjoy your dinner later!\w8\e"
	//"Alright! Have a good dinner later!"
	"\s[0]  Alright!\w8\w5 /
	\s[0]Have a good dinner later!\w8\e"
	//"Good! I hope you enjoy your dinner later."
	"\s[0]  Good!\w8\w5 /
	\s[0]I hope you enjoy your dinner later.\w8\e"
	//"Oh! What are you gonna get?"
	"\s[0]  Oh!\w8\w2 /
	\s[0]What are you gonna get?\w8\w8/
	\![open,input,inputuserdinner,-1]"
	//"That's good. What are you getting for dinner?"
	"\s[0]  That's good.\w8\w5 /
	\s[0]What are you getting for dinner?/
	\![open,input,inputuserdinner,-1]"
}

inputuserdinner 
{
	DinnerMentioned = "TRUE"
	--
	//"Sounds good!"
	"\s[0]  Sounds good!\w8\e"
	//"Okay~ Enjoy your dinner later!"
	"\s[0]  Okay~ Enjoy your dinner later!\w8\e"
	//"Sounds nice! Enjoy your dinner later, then!"
	"\s[0]  Sounds nice!\w8\w8 Enjoy your dinner later,\w2 then!\w8\e"
}

OnClose
 {
 timeslot = GetTimeSlot //This checks the time.
 --
	if passmin >= 5	//Checks if you'd have the ghost open for 5 minutes.
		{
			if RAND(100) <= 40 //40% chance happening
			{
				"\0\s[0]This is a random close dialogue.\w8\1\s[10]The random number generator chose something below 40.\w8\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					
				}
			elseif timeslot == "morning"
 				{
 					
 				}
 			elseif timeslot == "lunch"
 				{
					if LunchMentioned == "TRUE"
					{
						//"Have a good lunch later, %(username)!"
						"\s[0]  Have a good lunch later,\w2 %(username)!/
						Bye bye!\w8\e"
						//"Enjoy your lunch later, %(username)!"
						"\s[0]  Enjoy your lunch later,\w2 %(username)!\w3/
						\w2B\w2y\w2e\w2e\w2e\w2e\w2e\w2!\w8\e"
					}
					else
					{
					}
 				}
 			elseif timeslot == "afternoon"
 				{
					if DinnerMentioned == "TRUE"
					{
						"\b[0]"
						"\b[1]"
						"\b[2]"
						"\b[3]"
						"\b[4]"
						"\b[5]"
						"\b[6]"
						"\b[8]"
						--
						//noexp
						//"Have a good dinner later, %(username)!"
						"\s[0]  Have a good dinner later,\w3 %(username)!"
						//"I hope you enjoy dinner later, %(username)!"
						"\s[0]  I hope you enjoy dinner later,\w3 %(username)!"
						//"Enjoy your dinner later, %(username)!"
						"\s[0]  Enjoy your dinner later,\w3 %(username)!"
					}
					else
					{
						
					}
 				}
  			elseif timeslot == "evening"
 				{
					if DinnerMentioned == "TRUE"
					{
						"\b[0]"
						"\b[1]"
						"\b[2]"
						"\b[3]"
						"\b[4]"
						"\b[5]"
						"\b[6]"
						"\b[8]"
						--
						//noexp
						//"Have a good dinner later, %(username)!"
						"\s[0]  Have a good dinner later,\w3 %(username)!"
						//"I hope you enjoy dinner later, %(username)!"
						"\s[0]  I hope you enjoy dinner later,\w3 %(username)!"
						//"Enjoy your dinner later, %(username)!"
						"\s[0]  Enjoy your dinner later,\w3 %(username)!"
					}
					else
					{
						
					}
 				}
			elseif timeslot == "latenight"
			 	{

				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
		
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[0]This dialogue means we were minimized.\w8\1\s[10]Then brought back up.\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Girl" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\0\s[0]This dialogue is for us reloading ourselves.\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]This dialogue means we are switching to %(reference0).\w8\1\s[10]Bye.\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged
OnGhostChanged
{
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Ghostie" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[0]We have reloaded ourselves.\1\w8\s[10]Sure have.\e"
	}
	else //If you're switching to them from another ghost...
	{
		//noexp
		//nobal
		"\s[0]\b[0]  Bye bye, %(reference0)!\w8\w8\w8\w2\n\n[half]/
		\s[0]Hello,\w2 %(username)!\w8\w3\n\n[half]/
		\s[0]I see you switched %(reference0) out for us."
		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{

	}
	else //if you don't have any specific dialogue for a specific shell
	{
	
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "Ghostie Default Shell" //Shell name in descript.txt file.
 	{
 		nowshell = "default" //This is the folder name for your shell. Not the same as the above! 
		
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. To be honest, I have not experimented with this too much because making shells is a pain in the tuckus, but I'm going to take cindysuke's coding on faith and assume reference[0] is correct instead of reference0. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Honestly setting up clothing is a nightmare and I hate doing it, and if your ghost is going to be moving around substantially or at all, clothing won't stay in the right place anyway. So unless you're like a real expert on surfaces.txt coding and rigging up clothing for different poses or you're intense or dedicated enough to set up clothing in the right place for every pose you do, I would not bother with clothing for your ghost.
 //HOWEVER I can't begrudge people who actually would put in that effort! And in that case, this function is for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}

//If you are super dedicated to doing clothes, I'd recommend checking out some more in-depth FLELE tutorials for stuff about clothing until I muster up the energy to write a walkthrough page for it.